#!/usr/bin/env python3
#
# Â© Reuben Thomas <rrt@sc3d.org> 2024
# Released under the GPL version 3, or (at your option) any later version.

# /// script
# requires-python = ">=3.9"
# dependencies = ["tmxlib"]
# ///

import argparse
import re
from pathlib import Path

import tmxlib as tmx


# Command-line arguments
parser = argparse.ArgumentParser(
    description="Convert plain text Mr Matt levels to Tiled .tmx format.",
)
parser.add_argument(
    "-V",
    "--version",
    action="version",
    version="%(prog)s 0.1 (27 Dec 2024) by Reuben Thomas <rrt@sc3d.org>",
)
parser.add_argument(
    "mrmatt_file", metavar="MR-MATT-LEVEL", help="plain text MrMatt level file"
)
parser.add_argument(
    "tiled_directory", metavar="DIRECTORY", help="directory in which to put Tiled files"
)
args = parser.parse_args()


# Read the input
map_width = 31
map_height = 18

with open(args.mrmatt_file, encoding="utf-8") as fh:
    input_lines = fh.read().splitlines()
pack_title = input_lines[0]
pack_filename = re.sub(r"^(\*+)", lambda m: str(len(m.group(1))), pack_title) + ".txt"
pack_author = input_lines[1]
check_line = input_lines[2]


# Convert tile encoding
def convert(row: list[str]) -> list[int]:
    char_to_num = {
        " ": 1,
        "-": 2,
        "#": 3,
        "*": 4,
        "+": 5,
        "=": 8,
        "!": 9,
        "H": 10,
    }
    return list(map(lambda c: char_to_num[c], row))


line = 3
levels = []
level_titles = []
while True:
    level_title = input_lines[line]
    if level_title == "END":
        break
    level_titles.append(level_title)
    line += 1
    levels.append([])
    for i in range(line, line + map_height):
        levels[-1] += convert(list(input_lines[i]))
    line += map_height
    line += 1

# Construct the output maps and save them
tilesize = 32
for i, level in enumerate(levels):
    tilemap = tmx.Map((map_width, map_height), (tilesize, tilesize))
    tilemap.properties["Title"] = level_titles[i]
    tilemap.tilesets = [  # pyright: ignore
        tmx.ImageTileset("MrMatt", (tilesize, tilesize), 1, source="MrMatt.tsx")
    ]
    tilemap.layers = [tmx.layer.TileLayer(tilemap, "Tile Layer 1", data=level)]  # pyright: ignore
    tilemap.save(
        Path(args.tiled_directory) / f"{str(i + 1).zfill(2)} {level_titles[i]}.tmx"
    )
